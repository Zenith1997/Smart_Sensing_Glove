
Usart receive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000009fc  00000a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b10  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f42  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000872  00000000  00000000  00001b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073c  00000000  00000000  000023b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a4  00000000  00000000  00002af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ed  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e8  00000000  00000000  00003185  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000386d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3a       	cpi	r26, 0xA2	; 162
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <main>
  8a:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
  92:	1a ba       	out	0x1a, r1	; 26
  94:	87 e8       	ldi	r24, 0x87	; 135
  96:	86 b9       	out	0x06, r24	; 6
  98:	80 e4       	ldi	r24, 0x40	; 64
  9a:	87 b9       	out	0x07, r24	; 7
  9c:	08 95       	ret

0000009e <ADC_Read>:
  9e:	87 70       	andi	r24, 0x07	; 7
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	87 b9       	out	0x07, r24	; 7
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	86 b9       	out	0x06, r24	; 6
  aa:	34 9b       	sbis	0x06, 4	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_Read+0xc>
  ae:	86 b1       	in	r24, 0x06	; 6
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	86 b9       	out	0x06, r24	; 6
  b4:	24 b1       	in	r18, 0x04	; 4
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	98 2f       	mov	r25, r24
  bc:	88 27       	eor	r24, r24
  be:	82 0f       	add	r24, r18
  c0:	91 1d       	adc	r25, r1
  c2:	08 95       	ret

000000c4 <LCD_Command>:

void LCD_Clear()									//This function is used to clear the Display of the LCD
{
	LCD_Command(0x01);								//Clears display 
	_delay_ms(3);
	LCD_Command(0x80);								// Cursor at home position (left edge of the display)
  c4:	98 b3       	in	r25, 0x18	; 24
  c6:	9f 70       	andi	r25, 0x0F	; 15
  c8:	28 2f       	mov	r18, r24
  ca:	20 7f       	andi	r18, 0xF0	; 240
  cc:	92 2b       	or	r25, r18
  ce:	98 bb       	out	0x18, r25	; 24
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	9e 7f       	andi	r25, 0xFE	; 254
  d4:	98 bb       	out	0x18, r25	; 24
  d6:	98 b3       	in	r25, 0x18	; 24
  d8:	92 60       	ori	r25, 0x02	; 2
  da:	98 bb       	out	0x18, r25	; 24
  dc:	35 e0       	ldi	r19, 0x05	; 5
  de:	3a 95       	dec	r19
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Command+0x1a>
  e2:	00 00       	nop
  e4:	98 b3       	in	r25, 0x18	; 24
  e6:	9d 7f       	andi	r25, 0xFD	; 253
  e8:	98 bb       	out	0x18, r25	; 24
  ea:	ef e8       	ldi	r30, 0x8F	; 143
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Command+0x2a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_Command+0x30>
  f4:	00 00       	nop
  f6:	28 b3       	in	r18, 0x18	; 24
  f8:	f0 e1       	ldi	r31, 0x10	; 16
  fa:	8f 9f       	mul	r24, r31
  fc:	c0 01       	movw	r24, r0
  fe:	11 24       	eor	r1, r1
 100:	92 2f       	mov	r25, r18
 102:	9f 70       	andi	r25, 0x0F	; 15
 104:	89 2b       	or	r24, r25
 106:	88 bb       	out	0x18, r24	; 24
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	35 e0       	ldi	r19, 0x05	; 5
 110:	3a 95       	dec	r19
 112:	f1 f7       	brne	.-4      	; 0x110 <LCD_Command+0x4c>
 114:	00 00       	nop
 116:	88 b3       	in	r24, 0x18	; 24
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	88 bb       	out	0x18, r24	; 24
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	9f e1       	ldi	r25, 0x1F	; 31
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_Command+0x5c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_Command+0x62>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <LCD_Init>:
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	87 bb       	out	0x17, r24	; 23
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	89 ef       	ldi	r24, 0xF9	; 249
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <LCD_Init+0xa>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_Init+0x14>
 13e:	00 00       	nop
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_Command>
 146:	88 e2       	ldi	r24, 0x28	; 40
 148:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_Command>
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_Command>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_Command>
 158:	82 e8       	ldi	r24, 0x82	; 130
 15a:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_Command>
 15e:	08 95       	ret

00000160 <LCD_Char>:
}

void LCD_Char(unsigned char data)					//This function is used to display a single character on the LCD
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data & 0xf0);		// Send data to data port-  sending upper nibble
 160:	98 b3       	in	r25, 0x18	; 24
 162:	9f 70       	andi	r25, 0x0F	; 15
 164:	28 2f       	mov	r18, r24
 166:	20 7f       	andi	r18, 0xF0	; 240
 168:	92 2b       	or	r25, r18
 16a:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_RS);						// make RS = 1 for data
 16c:	98 b3       	in	r25, 0x18	; 24
 16e:	91 60       	ori	r25, 0x01	; 1
 170:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_EN);						// EN=1 
 172:	98 b3       	in	r25, 0x18	; 24
 174:	92 60       	ori	r25, 0x02	; 2
 176:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	35 e0       	ldi	r19, 0x05	; 5
 17a:	3a 95       	dec	r19
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_Char+0x1a>
 17e:	00 00       	nop
	_delay_us(1);									// wait for make enable wide
	LCD_DPRT &= ~(1<<LCD_EN);						// EN = 0 
 180:	98 b3       	in	r25, 0x18	; 24
 182:	9d 7f       	andi	r25, 0xFD	; 253
 184:	98 bb       	out	0x18, r25	; 24
 186:	ef e8       	ldi	r30, 0x8F	; 143
 188:	f1 e0       	ldi	r31, 0x01	; 1
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_Char+0x2a>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_Char+0x30>
 190:	00 00       	nop
	_delay_us(100);									// wait for make enable wide
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data << 4);		// Send data to data port-  sending lower nibble
 192:	28 b3       	in	r18, 0x18	; 24
 194:	f0 e1       	ldi	r31, 0x10	; 16
 196:	8f 9f       	mul	r24, r31
 198:	c0 01       	movw	r24, r0
 19a:	11 24       	eor	r1, r1
 19c:	92 2f       	mov	r25, r18
 19e:	9f 70       	andi	r25, 0x0F	; 15
 1a0:	89 2b       	or	r24, r25
 1a2:	88 bb       	out	0x18, r24	; 24
	LCD_DPRT |= (1<<LCD_EN);						// EN=1 
 1a4:	88 b3       	in	r24, 0x18	; 24
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	88 bb       	out	0x18, r24	; 24
 1aa:	35 e0       	ldi	r19, 0x05	; 5
 1ac:	3a 95       	dec	r19
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_Char+0x4c>
 1b0:	00 00       	nop
	_delay_us(1);									// wait for make enable wide
	LCD_DPRT &= ~(1<<LCD_EN);						// EN = 0 
 1b2:	88 b3       	in	r24, 0x18	; 24
 1b4:	8d 7f       	andi	r24, 0xFD	; 253
 1b6:	88 bb       	out	0x18, r24	; 24
 1b8:	8f e3       	ldi	r24, 0x3F	; 63
 1ba:	9f e1       	ldi	r25, 0x1F	; 31
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Char+0x5c>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Char+0x62>
 1c2:	00 00       	nop
 1c4:	08 95       	ret

000001c6 <LCD_String_xy>:
	_delay_us(2000);								// wait for make enable wide
}

void LCD_String_xy(unsigned char row, unsigned char pos, char *str) //This function is used to display a character array on the LCD with x,y position

{
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	8a 01       	movw	r16, r20
	if (row == 1)
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	31 f4       	brne	.+12     	; 0x1e0 <LCD_String_xy+0x1a>
	LCD_Command((pos & 0x0F)|0x80);									// Command of first row and pos should be less than 16
 1d4:	86 2f       	mov	r24, r22
 1d6:	8f 70       	andi	r24, 0x0F	; 15
 1d8:	80 68       	ori	r24, 0x80	; 128
 1da:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_Command>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <LCD_String_xy+0x28>
	else if (row == 2)
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	29 f4       	brne	.+10     	; 0x1ee <LCD_String_xy+0x28>
	LCD_Command((pos & 0x0F)|0xC0);									// Command of Second row 
 1e4:	86 2f       	mov	r24, r22
 1e6:	8f 70       	andi	r24, 0x0F	; 15
 1e8:	80 6c       	ori	r24, 0xC0	; 192
 1ea:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_Command>
	_delay_us(2000);								// wait for make enable wide
}

void LCD_String_xy(unsigned char row, unsigned char pos, char *str) //This function is used to display a character array on the LCD with x,y position

{
 1ee:	c0 e0       	ldi	r28, 0x00	; 0
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <LCD_String_xy+0x34>
	LCD_Command((pos & 0x0F)|0xC0);									// Command of Second row 
	
	int i;
	for(i=0;str[i]!=0;i++)											// Send each char of string till the NULL
	{
		LCD_Char (str[i]);											// passes each char to the LCD_char function
 1f4:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_Char>
	LCD_Command((pos & 0x0F)|0x80);									// Command of first row and pos should be less than 16
	else if (row == 2)
	LCD_Command((pos & 0x0F)|0xC0);									// Command of Second row 
	
	int i;
	for(i=0;str[i]!=0;i++)											// Send each char of string till the NULL
 1f8:	21 96       	adiw	r28, 0x01	; 1
 1fa:	f8 01       	movw	r30, r16
 1fc:	ec 0f       	add	r30, r28
 1fe:	fd 1f       	adc	r31, r29
 200:	80 81       	ld	r24, Z
 202:	81 11       	cpse	r24, r1
 204:	f7 cf       	rjmp	.-18     	; 0x1f4 <LCD_String_xy+0x2e>
	{
		LCD_Char (str[i]);											// passes each char to the LCD_char function
	}
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	08 95       	ret

00000210 <USART_Init>:
		strData++;
	}
	WriteData('\0');
	return;

}
 210:	90 bd       	out	0x20, r25	; 32
 212:	89 b9       	out	0x09, r24	; 9
 214:	88 e1       	ldi	r24, 0x18	; 24
 216:	8a b9       	out	0x0a, r24	; 10
 218:	8e e8       	ldi	r24, 0x8E	; 142
 21a:	80 bd       	out	0x20, r24	; 32
 21c:	08 95       	ret

0000021e <ReadData>:
 21e:	5f 9b       	sbis	0x0b, 7	; 11
 220:	fe cf       	rjmp	.-4      	; 0x21e <ReadData>
 222:	8c b1       	in	r24, 0x0c	; 12
 224:	08 95       	ret

00000226 <AtoD>:




void AtoD()
{
 226:	6f 92       	push	r6
 228:	7f 92       	push	r7
 22a:	8f 92       	push	r8
 22c:	9f 92       	push	r9
 22e:	af 92       	push	r10
 230:	bf 92       	push	r11
 232:	cf 92       	push	r12
 234:	df 92       	push	r13
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	64 97       	sbiw	r28, 0x14	; 20
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	cd bf       	out	0x3d, r28	; 61

	//LCD_Clear();
	// sprintf(buffer, "%d -->> ", signL);
//	 LCD_String_xy(2,0,buffer);
	 
	ADC_Value1 = ADC_Read(0);		/* Read the status on X-OUT pin using channel 0 */
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_Read>
 258:	7c 01       	movw	r14, r24
	sprintf(buffer, "A%d   ", ADC_Value1);
 25a:	ff 92       	push	r15
 25c:	8f 93       	push	r24
 25e:	80 e6       	ldi	r24, 0x60	; 96
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	9f 93       	push	r25
 264:	8f 93       	push	r24
 266:	8e 01       	movw	r16, r28
 268:	0f 5f       	subi	r16, 0xFF	; 255
 26a:	1f 4f       	sbci	r17, 0xFF	; 255
 26c:	1f 93       	push	r17
 26e:	0f 93       	push	r16
 270:	0e 94 12 02 	call	0x424	; 0x424 <sprintf>
	LCD_String_xy(1, 2, buffer);
 274:	a8 01       	movw	r20, r16
 276:	62 e0       	ldi	r22, 0x02	; 2
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_String_xy>
	
	ADC_Value2 = ADC_Read(1);		/* Read the status on Y-OUT pin using channel 0 */
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_Read>
 284:	6c 01       	movw	r12, r24
	sprintf(buffer, "B%d   ", ADC_Value2);
 286:	df 92       	push	r13
 288:	8f 93       	push	r24
 28a:	87 e6       	ldi	r24, 0x67	; 103
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	9f 93       	push	r25
 290:	8f 93       	push	r24
 292:	1f 93       	push	r17
 294:	0f 93       	push	r16
 296:	0e 94 12 02 	call	0x424	; 0x424 <sprintf>
	LCD_String_xy(1, 10, buffer);
 29a:	a8 01       	movw	r20, r16
 29c:	6a e0       	ldi	r22, 0x0A	; 10
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_String_xy>


	ADC_Value3 = ADC_Read(2);		/* Read the status on SWITCH pin using channel 0 */
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_Read>
 2aa:	5c 01       	movw	r10, r24
	sprintf(buffer, "C%d   ", ADC_Value3);
 2ac:	bf 92       	push	r11
 2ae:	8f 93       	push	r24
 2b0:	8e e6       	ldi	r24, 0x6E	; 110
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	9f 93       	push	r25
 2b6:	8f 93       	push	r24
 2b8:	1f 93       	push	r17
 2ba:	0f 93       	push	r16
 2bc:	0e 94 12 02 	call	0x424	; 0x424 <sprintf>
	LCD_String_xy(1, 17, buffer);
 2c0:	a8 01       	movw	r20, r16
 2c2:	61 e1       	ldi	r22, 0x11	; 17
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_String_xy>
	
	
	ADC_Value4 = ADC_Read(3);		/* Read the status on SWITCH pin using channel 0 */
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_Read>
 2d0:	3c 01       	movw	r6, r24
	sprintf(buffer, "D%d   ", ADC_Value4);
 2d2:	7f 92       	push	r7
 2d4:	8f 93       	push	r24
 2d6:	85 e7       	ldi	r24, 0x75	; 117
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	9f 93       	push	r25
 2dc:	8f 93       	push	r24
 2de:	1f 93       	push	r17
 2e0:	0f 93       	push	r16
 2e2:	0e 94 12 02 	call	0x424	; 0x424 <sprintf>
		LCD_String_xy(1, 24, buffer);
 2e6:	a8 01       	movw	r20, r16
 2e8:	68 e1       	ldi	r22, 0x18	; 24
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_String_xy>
	
	ADC_Value5 = ADC_Read(4);		/* Read the status on SWITCH pin using channel 0 */
 2f0:	84 e0       	ldi	r24, 0x04	; 4
 2f2:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_Read>
 2f6:	4c 01       	movw	r8, r24
	sprintf(buffer, "E%d   ", ADC_Value5);
 2f8:	9f 92       	push	r9
 2fa:	8f 93       	push	r24
 2fc:	8c e7       	ldi	r24, 0x7C	; 124
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	9f 93       	push	r25
 302:	8f 93       	push	r24
 304:	1f 93       	push	r17
 306:	0f 93       	push	r16
 308:	0e 94 12 02 	call	0x424	; 0x424 <sprintf>
	LCD_String_xy(1, 32, buffer);
 30c:	a8 01       	movw	r20, r16
 30e:	60 e2       	ldi	r22, 0x20	; 32
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_String_xy>
	if (ADC_Value1<500&&ADC_Value2<500&&ADC_Value3<500&&ADC_Value4<500&&ADC_Value5<500)
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
 320:	94 ef       	ldi	r25, 0xF4	; 244
 322:	e9 16       	cp	r14, r25
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	f9 06       	cpc	r15, r25
 328:	ec f4       	brge	.+58     	; 0x364 <AtoD+0x13e>
 32a:	84 ef       	ldi	r24, 0xF4	; 244
 32c:	c8 16       	cp	r12, r24
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	d8 06       	cpc	r13, r24
 332:	c4 f4       	brge	.+48     	; 0x364 <AtoD+0x13e>
 334:	94 ef       	ldi	r25, 0xF4	; 244
 336:	a9 16       	cp	r10, r25
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	b9 06       	cpc	r11, r25
 33c:	9c f4       	brge	.+38     	; 0x364 <AtoD+0x13e>
 33e:	84 ef       	ldi	r24, 0xF4	; 244
 340:	68 16       	cp	r6, r24
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	78 06       	cpc	r7, r24
 346:	74 f4       	brge	.+28     	; 0x364 <AtoD+0x13e>
 348:	94 ef       	ldi	r25, 0xF4	; 244
 34a:	89 16       	cp	r8, r25
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	99 06       	cpc	r9, r25
 350:	4c f4       	brge	.+18     	; 0x364 <AtoD+0x13e>
	{
		
		
		sprintf(buffer, "Comehere  ");
 352:	8b e0       	ldi	r24, 0x0B	; 11
 354:	e3 e8       	ldi	r30, 0x83	; 131
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	d8 01       	movw	r26, r16
 35a:	01 90       	ld	r0, Z+
 35c:	0d 92       	st	X+, r0
 35e:	8a 95       	dec	r24
 360:	e1 f7       	brne	.-8      	; 0x35a <AtoD+0x134>
 362:	2c c0       	rjmp	.+88     	; 0x3bc <AtoD+0x196>
		//_delay_ms(1000);
		
		
		
	}
	else if (ADC_Value1==707&&ADC_Value2==707&&ADC_Value3<700&&ADC_Value4<700&&ADC_Value5<700)
 364:	83 ec       	ldi	r24, 0xC3	; 195
 366:	e8 16       	cp	r14, r24
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	f8 06       	cpc	r15, r24
 36c:	f1 f4       	brne	.+60     	; 0x3aa <AtoD+0x184>
 36e:	93 ec       	ldi	r25, 0xC3	; 195
 370:	c9 16       	cp	r12, r25
 372:	92 e0       	ldi	r25, 0x02	; 2
 374:	d9 06       	cpc	r13, r25
 376:	c9 f4       	brne	.+50     	; 0x3aa <AtoD+0x184>
 378:	8c eb       	ldi	r24, 0xBC	; 188
 37a:	a8 16       	cp	r10, r24
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	b8 06       	cpc	r11, r24
 380:	a4 f4       	brge	.+40     	; 0x3aa <AtoD+0x184>
 382:	9c eb       	ldi	r25, 0xBC	; 188
 384:	69 16       	cp	r6, r25
 386:	92 e0       	ldi	r25, 0x02	; 2
 388:	79 06       	cpc	r7, r25
 38a:	7c f4       	brge	.+30     	; 0x3aa <AtoD+0x184>
 38c:	8c eb       	ldi	r24, 0xBC	; 188
 38e:	88 16       	cp	r8, r24
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	98 06       	cpc	r9, r24
 394:	54 f4       	brge	.+20     	; 0x3aa <AtoD+0x184>
	{
		
		
		sprintf(buffer, "ha haaa  ");
 396:	8a e0       	ldi	r24, 0x0A	; 10
 398:	ee e8       	ldi	r30, 0x8E	; 142
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	de 01       	movw	r26, r28
 39e:	11 96       	adiw	r26, 0x01	; 1
 3a0:	01 90       	ld	r0, Z+
 3a2:	0d 92       	st	X+, r0
 3a4:	8a 95       	dec	r24
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <AtoD+0x17a>
 3a8:	09 c0       	rjmp	.+18     	; 0x3bc <AtoD+0x196>
		
	}
	else
	{
		 
		sprintf(buffer, "ha ertwt ");
 3aa:	8a e0       	ldi	r24, 0x0A	; 10
 3ac:	e8 e9       	ldi	r30, 0x98	; 152
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	de 01       	movw	r26, r28
 3b2:	11 96       	adiw	r26, 0x01	; 1
 3b4:	01 90       	ld	r0, Z+
 3b6:	0d 92       	st	X+, r0
 3b8:	8a 95       	dec	r24
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <AtoD+0x18e>
		//LCD_String_xy(2, 10, buffer);
		//_delay_ms(1000);
		
	}
}
 3bc:	64 96       	adiw	r28, 0x14	; 20
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	f8 94       	cli
 3c2:	de bf       	out	0x3e, r29	; 62
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	cd bf       	out	0x3d, r28	; 61
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	df 90       	pop	r13
 3d6:	cf 90       	pop	r12
 3d8:	bf 90       	pop	r11
 3da:	af 90       	pop	r10
 3dc:	9f 90       	pop	r9
 3de:	8f 90       	pop	r8
 3e0:	7f 90       	pop	r7
 3e2:	6f 90       	pop	r6
 3e4:	08 95       	ret

000003e6 <main>:
float Acc_x,Acc_y,Acc_z,Gyro_x,Gyro_y,Gyro_z;



int main(void)
{
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	2c 97       	sbiw	r28, 0x0c	; 12
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	f8 94       	cli
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	cd bf       	out	0x3d, r28	; 61
	USART_Init(9600);
 3fa:	80 e8       	ldi	r24, 0x80	; 128
 3fc:	95 e2       	ldi	r25, 0x25	; 37
 3fe:	0e 94 08 01 	call	0x210	; 0x210 <USART_Init>
	ADC_Init();
 402:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	LCD_Init();
 406:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_Init>
	sei();
 40a:	78 94       	sei
	char buffer[12];

	while(1)
	{	
		// LCD_String_xy(1,0,"hi");
		value= ReadData();
 40c:	0e 94 0f 01 	call	0x21e	; 0x21e <ReadData>
		 AtoD();
 410:	0e 94 13 01 	call	0x226	; 0x226 <AtoD>
		LCD_String_xy(2, 10, buffer);
 414:	ae 01       	movw	r20, r28
 416:	4f 5f       	subi	r20, 0xFF	; 255
 418:	5f 4f       	sbci	r21, 0xFF	; 255
 41a:	6a e0       	ldi	r22, 0x0A	; 10
 41c:	82 e0       	ldi	r24, 0x02	; 2
 41e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_String_xy>
 422:	f4 cf       	rjmp	.-24     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>

00000424 <sprintf>:
 424:	ae e0       	ldi	r26, 0x0E	; 14
 426:	b0 e0       	ldi	r27, 0x00	; 0
 428:	e8 e1       	ldi	r30, 0x18	; 24
 42a:	f2 e0       	ldi	r31, 0x02	; 2
 42c:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__prologue_saves__+0x1c>
 430:	0d 89       	ldd	r16, Y+21	; 0x15
 432:	1e 89       	ldd	r17, Y+22	; 0x16
 434:	86 e0       	ldi	r24, 0x06	; 6
 436:	8c 83       	std	Y+4, r24	; 0x04
 438:	1a 83       	std	Y+2, r17	; 0x02
 43a:	09 83       	std	Y+1, r16	; 0x01
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	9f e7       	ldi	r25, 0x7F	; 127
 440:	9e 83       	std	Y+6, r25	; 0x06
 442:	8d 83       	std	Y+5, r24	; 0x05
 444:	ae 01       	movw	r20, r28
 446:	47 5e       	subi	r20, 0xE7	; 231
 448:	5f 4f       	sbci	r21, 0xFF	; 255
 44a:	6f 89       	ldd	r22, Y+23	; 0x17
 44c:	78 8d       	ldd	r23, Y+24	; 0x18
 44e:	ce 01       	movw	r24, r28
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	0e 94 34 02 	call	0x468	; 0x468 <vfprintf>
 456:	ef 81       	ldd	r30, Y+7	; 0x07
 458:	f8 85       	ldd	r31, Y+8	; 0x08
 45a:	e0 0f       	add	r30, r16
 45c:	f1 1f       	adc	r31, r17
 45e:	10 82       	st	Z, r1
 460:	2e 96       	adiw	r28, 0x0e	; 14
 462:	e4 e0       	ldi	r30, 0x04	; 4
 464:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__epilogue_restores__+0x1c>

00000468 <vfprintf>:
 468:	ab e0       	ldi	r26, 0x0B	; 11
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	ea e3       	ldi	r30, 0x3A	; 58
 46e:	f2 e0       	ldi	r31, 0x02	; 2
 470:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__prologue_saves__>
 474:	6c 01       	movw	r12, r24
 476:	7b 01       	movw	r14, r22
 478:	8a 01       	movw	r16, r20
 47a:	fc 01       	movw	r30, r24
 47c:	17 82       	std	Z+7, r1	; 0x07
 47e:	16 82       	std	Z+6, r1	; 0x06
 480:	83 81       	ldd	r24, Z+3	; 0x03
 482:	81 ff       	sbrs	r24, 1
 484:	cc c1       	rjmp	.+920    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 486:	ce 01       	movw	r24, r28
 488:	01 96       	adiw	r24, 0x01	; 1
 48a:	3c 01       	movw	r6, r24
 48c:	f6 01       	movw	r30, r12
 48e:	93 81       	ldd	r25, Z+3	; 0x03
 490:	f7 01       	movw	r30, r14
 492:	93 fd       	sbrc	r25, 3
 494:	85 91       	lpm	r24, Z+
 496:	93 ff       	sbrs	r25, 3
 498:	81 91       	ld	r24, Z+
 49a:	7f 01       	movw	r14, r30
 49c:	88 23       	and	r24, r24
 49e:	09 f4       	brne	.+2      	; 0x4a2 <vfprintf+0x3a>
 4a0:	ba c1       	rjmp	.+884    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 4a2:	85 32       	cpi	r24, 0x25	; 37
 4a4:	39 f4       	brne	.+14     	; 0x4b4 <vfprintf+0x4c>
 4a6:	93 fd       	sbrc	r25, 3
 4a8:	85 91       	lpm	r24, Z+
 4aa:	93 ff       	sbrs	r25, 3
 4ac:	81 91       	ld	r24, Z+
 4ae:	7f 01       	movw	r14, r30
 4b0:	85 32       	cpi	r24, 0x25	; 37
 4b2:	29 f4       	brne	.+10     	; 0x4be <vfprintf+0x56>
 4b4:	b6 01       	movw	r22, r12
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 2b 04 	call	0x856	; 0x856 <fputc>
 4bc:	e7 cf       	rjmp	.-50     	; 0x48c <vfprintf+0x24>
 4be:	91 2c       	mov	r9, r1
 4c0:	21 2c       	mov	r2, r1
 4c2:	31 2c       	mov	r3, r1
 4c4:	ff e1       	ldi	r31, 0x1F	; 31
 4c6:	f3 15       	cp	r31, r3
 4c8:	d8 f0       	brcs	.+54     	; 0x500 <vfprintf+0x98>
 4ca:	8b 32       	cpi	r24, 0x2B	; 43
 4cc:	79 f0       	breq	.+30     	; 0x4ec <vfprintf+0x84>
 4ce:	38 f4       	brcc	.+14     	; 0x4de <vfprintf+0x76>
 4d0:	80 32       	cpi	r24, 0x20	; 32
 4d2:	79 f0       	breq	.+30     	; 0x4f2 <vfprintf+0x8a>
 4d4:	83 32       	cpi	r24, 0x23	; 35
 4d6:	a1 f4       	brne	.+40     	; 0x500 <vfprintf+0x98>
 4d8:	23 2d       	mov	r18, r3
 4da:	20 61       	ori	r18, 0x10	; 16
 4dc:	1d c0       	rjmp	.+58     	; 0x518 <vfprintf+0xb0>
 4de:	8d 32       	cpi	r24, 0x2D	; 45
 4e0:	61 f0       	breq	.+24     	; 0x4fa <vfprintf+0x92>
 4e2:	80 33       	cpi	r24, 0x30	; 48
 4e4:	69 f4       	brne	.+26     	; 0x500 <vfprintf+0x98>
 4e6:	23 2d       	mov	r18, r3
 4e8:	21 60       	ori	r18, 0x01	; 1
 4ea:	16 c0       	rjmp	.+44     	; 0x518 <vfprintf+0xb0>
 4ec:	83 2d       	mov	r24, r3
 4ee:	82 60       	ori	r24, 0x02	; 2
 4f0:	38 2e       	mov	r3, r24
 4f2:	e3 2d       	mov	r30, r3
 4f4:	e4 60       	ori	r30, 0x04	; 4
 4f6:	3e 2e       	mov	r3, r30
 4f8:	2a c0       	rjmp	.+84     	; 0x54e <vfprintf+0xe6>
 4fa:	f3 2d       	mov	r31, r3
 4fc:	f8 60       	ori	r31, 0x08	; 8
 4fe:	1d c0       	rjmp	.+58     	; 0x53a <vfprintf+0xd2>
 500:	37 fc       	sbrc	r3, 7
 502:	2d c0       	rjmp	.+90     	; 0x55e <vfprintf+0xf6>
 504:	20 ed       	ldi	r18, 0xD0	; 208
 506:	28 0f       	add	r18, r24
 508:	2a 30       	cpi	r18, 0x0A	; 10
 50a:	40 f0       	brcs	.+16     	; 0x51c <vfprintf+0xb4>
 50c:	8e 32       	cpi	r24, 0x2E	; 46
 50e:	b9 f4       	brne	.+46     	; 0x53e <vfprintf+0xd6>
 510:	36 fc       	sbrc	r3, 6
 512:	81 c1       	rjmp	.+770    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 514:	23 2d       	mov	r18, r3
 516:	20 64       	ori	r18, 0x40	; 64
 518:	32 2e       	mov	r3, r18
 51a:	19 c0       	rjmp	.+50     	; 0x54e <vfprintf+0xe6>
 51c:	36 fe       	sbrs	r3, 6
 51e:	06 c0       	rjmp	.+12     	; 0x52c <vfprintf+0xc4>
 520:	8a e0       	ldi	r24, 0x0A	; 10
 522:	98 9e       	mul	r9, r24
 524:	20 0d       	add	r18, r0
 526:	11 24       	eor	r1, r1
 528:	92 2e       	mov	r9, r18
 52a:	11 c0       	rjmp	.+34     	; 0x54e <vfprintf+0xe6>
 52c:	ea e0       	ldi	r30, 0x0A	; 10
 52e:	2e 9e       	mul	r2, r30
 530:	20 0d       	add	r18, r0
 532:	11 24       	eor	r1, r1
 534:	22 2e       	mov	r2, r18
 536:	f3 2d       	mov	r31, r3
 538:	f0 62       	ori	r31, 0x20	; 32
 53a:	3f 2e       	mov	r3, r31
 53c:	08 c0       	rjmp	.+16     	; 0x54e <vfprintf+0xe6>
 53e:	8c 36       	cpi	r24, 0x6C	; 108
 540:	21 f4       	brne	.+8      	; 0x54a <vfprintf+0xe2>
 542:	83 2d       	mov	r24, r3
 544:	80 68       	ori	r24, 0x80	; 128
 546:	38 2e       	mov	r3, r24
 548:	02 c0       	rjmp	.+4      	; 0x54e <vfprintf+0xe6>
 54a:	88 36       	cpi	r24, 0x68	; 104
 54c:	41 f4       	brne	.+16     	; 0x55e <vfprintf+0xf6>
 54e:	f7 01       	movw	r30, r14
 550:	93 fd       	sbrc	r25, 3
 552:	85 91       	lpm	r24, Z+
 554:	93 ff       	sbrs	r25, 3
 556:	81 91       	ld	r24, Z+
 558:	7f 01       	movw	r14, r30
 55a:	81 11       	cpse	r24, r1
 55c:	b3 cf       	rjmp	.-154    	; 0x4c4 <vfprintf+0x5c>
 55e:	98 2f       	mov	r25, r24
 560:	9f 7d       	andi	r25, 0xDF	; 223
 562:	95 54       	subi	r25, 0x45	; 69
 564:	93 30       	cpi	r25, 0x03	; 3
 566:	28 f4       	brcc	.+10     	; 0x572 <vfprintf+0x10a>
 568:	0c 5f       	subi	r16, 0xFC	; 252
 56a:	1f 4f       	sbci	r17, 0xFF	; 255
 56c:	9f e3       	ldi	r25, 0x3F	; 63
 56e:	99 83       	std	Y+1, r25	; 0x01
 570:	0d c0       	rjmp	.+26     	; 0x58c <vfprintf+0x124>
 572:	83 36       	cpi	r24, 0x63	; 99
 574:	31 f0       	breq	.+12     	; 0x582 <vfprintf+0x11a>
 576:	83 37       	cpi	r24, 0x73	; 115
 578:	71 f0       	breq	.+28     	; 0x596 <vfprintf+0x12e>
 57a:	83 35       	cpi	r24, 0x53	; 83
 57c:	09 f0       	breq	.+2      	; 0x580 <vfprintf+0x118>
 57e:	59 c0       	rjmp	.+178    	; 0x632 <vfprintf+0x1ca>
 580:	21 c0       	rjmp	.+66     	; 0x5c4 <vfprintf+0x15c>
 582:	f8 01       	movw	r30, r16
 584:	80 81       	ld	r24, Z
 586:	89 83       	std	Y+1, r24	; 0x01
 588:	0e 5f       	subi	r16, 0xFE	; 254
 58a:	1f 4f       	sbci	r17, 0xFF	; 255
 58c:	88 24       	eor	r8, r8
 58e:	83 94       	inc	r8
 590:	91 2c       	mov	r9, r1
 592:	53 01       	movw	r10, r6
 594:	13 c0       	rjmp	.+38     	; 0x5bc <vfprintf+0x154>
 596:	28 01       	movw	r4, r16
 598:	f2 e0       	ldi	r31, 0x02	; 2
 59a:	4f 0e       	add	r4, r31
 59c:	51 1c       	adc	r5, r1
 59e:	f8 01       	movw	r30, r16
 5a0:	a0 80       	ld	r10, Z
 5a2:	b1 80       	ldd	r11, Z+1	; 0x01
 5a4:	36 fe       	sbrs	r3, 6
 5a6:	03 c0       	rjmp	.+6      	; 0x5ae <vfprintf+0x146>
 5a8:	69 2d       	mov	r22, r9
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <vfprintf+0x14a>
 5ae:	6f ef       	ldi	r22, 0xFF	; 255
 5b0:	7f ef       	ldi	r23, 0xFF	; 255
 5b2:	c5 01       	movw	r24, r10
 5b4:	0e 94 20 04 	call	0x840	; 0x840 <strnlen>
 5b8:	4c 01       	movw	r8, r24
 5ba:	82 01       	movw	r16, r4
 5bc:	f3 2d       	mov	r31, r3
 5be:	ff 77       	andi	r31, 0x7F	; 127
 5c0:	3f 2e       	mov	r3, r31
 5c2:	16 c0       	rjmp	.+44     	; 0x5f0 <vfprintf+0x188>
 5c4:	28 01       	movw	r4, r16
 5c6:	22 e0       	ldi	r18, 0x02	; 2
 5c8:	42 0e       	add	r4, r18
 5ca:	51 1c       	adc	r5, r1
 5cc:	f8 01       	movw	r30, r16
 5ce:	a0 80       	ld	r10, Z
 5d0:	b1 80       	ldd	r11, Z+1	; 0x01
 5d2:	36 fe       	sbrs	r3, 6
 5d4:	03 c0       	rjmp	.+6      	; 0x5dc <vfprintf+0x174>
 5d6:	69 2d       	mov	r22, r9
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <vfprintf+0x178>
 5dc:	6f ef       	ldi	r22, 0xFF	; 255
 5de:	7f ef       	ldi	r23, 0xFF	; 255
 5e0:	c5 01       	movw	r24, r10
 5e2:	0e 94 15 04 	call	0x82a	; 0x82a <strnlen_P>
 5e6:	4c 01       	movw	r8, r24
 5e8:	f3 2d       	mov	r31, r3
 5ea:	f0 68       	ori	r31, 0x80	; 128
 5ec:	3f 2e       	mov	r3, r31
 5ee:	82 01       	movw	r16, r4
 5f0:	33 fc       	sbrc	r3, 3
 5f2:	1b c0       	rjmp	.+54     	; 0x62a <vfprintf+0x1c2>
 5f4:	82 2d       	mov	r24, r2
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	88 16       	cp	r8, r24
 5fa:	99 06       	cpc	r9, r25
 5fc:	b0 f4       	brcc	.+44     	; 0x62a <vfprintf+0x1c2>
 5fe:	b6 01       	movw	r22, r12
 600:	80 e2       	ldi	r24, 0x20	; 32
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 2b 04 	call	0x856	; 0x856 <fputc>
 608:	2a 94       	dec	r2
 60a:	f4 cf       	rjmp	.-24     	; 0x5f4 <vfprintf+0x18c>
 60c:	f5 01       	movw	r30, r10
 60e:	37 fc       	sbrc	r3, 7
 610:	85 91       	lpm	r24, Z+
 612:	37 fe       	sbrs	r3, 7
 614:	81 91       	ld	r24, Z+
 616:	5f 01       	movw	r10, r30
 618:	b6 01       	movw	r22, r12
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 2b 04 	call	0x856	; 0x856 <fputc>
 620:	21 10       	cpse	r2, r1
 622:	2a 94       	dec	r2
 624:	21 e0       	ldi	r18, 0x01	; 1
 626:	82 1a       	sub	r8, r18
 628:	91 08       	sbc	r9, r1
 62a:	81 14       	cp	r8, r1
 62c:	91 04       	cpc	r9, r1
 62e:	71 f7       	brne	.-36     	; 0x60c <vfprintf+0x1a4>
 630:	e8 c0       	rjmp	.+464    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 632:	84 36       	cpi	r24, 0x64	; 100
 634:	11 f0       	breq	.+4      	; 0x63a <vfprintf+0x1d2>
 636:	89 36       	cpi	r24, 0x69	; 105
 638:	41 f5       	brne	.+80     	; 0x68a <vfprintf+0x222>
 63a:	f8 01       	movw	r30, r16
 63c:	37 fe       	sbrs	r3, 7
 63e:	07 c0       	rjmp	.+14     	; 0x64e <vfprintf+0x1e6>
 640:	60 81       	ld	r22, Z
 642:	71 81       	ldd	r23, Z+1	; 0x01
 644:	82 81       	ldd	r24, Z+2	; 0x02
 646:	93 81       	ldd	r25, Z+3	; 0x03
 648:	0c 5f       	subi	r16, 0xFC	; 252
 64a:	1f 4f       	sbci	r17, 0xFF	; 255
 64c:	08 c0       	rjmp	.+16     	; 0x65e <vfprintf+0x1f6>
 64e:	60 81       	ld	r22, Z
 650:	71 81       	ldd	r23, Z+1	; 0x01
 652:	07 2e       	mov	r0, r23
 654:	00 0c       	add	r0, r0
 656:	88 0b       	sbc	r24, r24
 658:	99 0b       	sbc	r25, r25
 65a:	0e 5f       	subi	r16, 0xFE	; 254
 65c:	1f 4f       	sbci	r17, 0xFF	; 255
 65e:	f3 2d       	mov	r31, r3
 660:	ff 76       	andi	r31, 0x6F	; 111
 662:	3f 2e       	mov	r3, r31
 664:	97 ff       	sbrs	r25, 7
 666:	09 c0       	rjmp	.+18     	; 0x67a <vfprintf+0x212>
 668:	90 95       	com	r25
 66a:	80 95       	com	r24
 66c:	70 95       	com	r23
 66e:	61 95       	neg	r22
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	8f 4f       	sbci	r24, 0xFF	; 255
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	f0 68       	ori	r31, 0x80	; 128
 678:	3f 2e       	mov	r3, r31
 67a:	2a e0       	ldi	r18, 0x0A	; 10
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	a3 01       	movw	r20, r6
 680:	0e 94 67 04 	call	0x8ce	; 0x8ce <__ultoa_invert>
 684:	88 2e       	mov	r8, r24
 686:	86 18       	sub	r8, r6
 688:	45 c0       	rjmp	.+138    	; 0x714 <vfprintf+0x2ac>
 68a:	85 37       	cpi	r24, 0x75	; 117
 68c:	31 f4       	brne	.+12     	; 0x69a <vfprintf+0x232>
 68e:	23 2d       	mov	r18, r3
 690:	2f 7e       	andi	r18, 0xEF	; 239
 692:	b2 2e       	mov	r11, r18
 694:	2a e0       	ldi	r18, 0x0A	; 10
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	25 c0       	rjmp	.+74     	; 0x6e4 <vfprintf+0x27c>
 69a:	93 2d       	mov	r25, r3
 69c:	99 7f       	andi	r25, 0xF9	; 249
 69e:	b9 2e       	mov	r11, r25
 6a0:	8f 36       	cpi	r24, 0x6F	; 111
 6a2:	c1 f0       	breq	.+48     	; 0x6d4 <vfprintf+0x26c>
 6a4:	18 f4       	brcc	.+6      	; 0x6ac <vfprintf+0x244>
 6a6:	88 35       	cpi	r24, 0x58	; 88
 6a8:	79 f0       	breq	.+30     	; 0x6c8 <vfprintf+0x260>
 6aa:	b5 c0       	rjmp	.+362    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 6ac:	80 37       	cpi	r24, 0x70	; 112
 6ae:	19 f0       	breq	.+6      	; 0x6b6 <vfprintf+0x24e>
 6b0:	88 37       	cpi	r24, 0x78	; 120
 6b2:	21 f0       	breq	.+8      	; 0x6bc <vfprintf+0x254>
 6b4:	b0 c0       	rjmp	.+352    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 6b6:	e9 2f       	mov	r30, r25
 6b8:	e0 61       	ori	r30, 0x10	; 16
 6ba:	be 2e       	mov	r11, r30
 6bc:	b4 fe       	sbrs	r11, 4
 6be:	0d c0       	rjmp	.+26     	; 0x6da <vfprintf+0x272>
 6c0:	fb 2d       	mov	r31, r11
 6c2:	f4 60       	ori	r31, 0x04	; 4
 6c4:	bf 2e       	mov	r11, r31
 6c6:	09 c0       	rjmp	.+18     	; 0x6da <vfprintf+0x272>
 6c8:	34 fe       	sbrs	r3, 4
 6ca:	0a c0       	rjmp	.+20     	; 0x6e0 <vfprintf+0x278>
 6cc:	29 2f       	mov	r18, r25
 6ce:	26 60       	ori	r18, 0x06	; 6
 6d0:	b2 2e       	mov	r11, r18
 6d2:	06 c0       	rjmp	.+12     	; 0x6e0 <vfprintf+0x278>
 6d4:	28 e0       	ldi	r18, 0x08	; 8
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <vfprintf+0x27c>
 6da:	20 e1       	ldi	r18, 0x10	; 16
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <vfprintf+0x27c>
 6e0:	20 e1       	ldi	r18, 0x10	; 16
 6e2:	32 e0       	ldi	r19, 0x02	; 2
 6e4:	f8 01       	movw	r30, r16
 6e6:	b7 fe       	sbrs	r11, 7
 6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <vfprintf+0x290>
 6ea:	60 81       	ld	r22, Z
 6ec:	71 81       	ldd	r23, Z+1	; 0x01
 6ee:	82 81       	ldd	r24, Z+2	; 0x02
 6f0:	93 81       	ldd	r25, Z+3	; 0x03
 6f2:	0c 5f       	subi	r16, 0xFC	; 252
 6f4:	1f 4f       	sbci	r17, 0xFF	; 255
 6f6:	06 c0       	rjmp	.+12     	; 0x704 <vfprintf+0x29c>
 6f8:	60 81       	ld	r22, Z
 6fa:	71 81       	ldd	r23, Z+1	; 0x01
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 5f       	subi	r16, 0xFE	; 254
 702:	1f 4f       	sbci	r17, 0xFF	; 255
 704:	a3 01       	movw	r20, r6
 706:	0e 94 67 04 	call	0x8ce	; 0x8ce <__ultoa_invert>
 70a:	88 2e       	mov	r8, r24
 70c:	86 18       	sub	r8, r6
 70e:	fb 2d       	mov	r31, r11
 710:	ff 77       	andi	r31, 0x7F	; 127
 712:	3f 2e       	mov	r3, r31
 714:	36 fe       	sbrs	r3, 6
 716:	0d c0       	rjmp	.+26     	; 0x732 <vfprintf+0x2ca>
 718:	23 2d       	mov	r18, r3
 71a:	2e 7f       	andi	r18, 0xFE	; 254
 71c:	a2 2e       	mov	r10, r18
 71e:	89 14       	cp	r8, r9
 720:	58 f4       	brcc	.+22     	; 0x738 <vfprintf+0x2d0>
 722:	34 fe       	sbrs	r3, 4
 724:	0b c0       	rjmp	.+22     	; 0x73c <vfprintf+0x2d4>
 726:	32 fc       	sbrc	r3, 2
 728:	09 c0       	rjmp	.+18     	; 0x73c <vfprintf+0x2d4>
 72a:	83 2d       	mov	r24, r3
 72c:	8e 7e       	andi	r24, 0xEE	; 238
 72e:	a8 2e       	mov	r10, r24
 730:	05 c0       	rjmp	.+10     	; 0x73c <vfprintf+0x2d4>
 732:	b8 2c       	mov	r11, r8
 734:	a3 2c       	mov	r10, r3
 736:	03 c0       	rjmp	.+6      	; 0x73e <vfprintf+0x2d6>
 738:	b8 2c       	mov	r11, r8
 73a:	01 c0       	rjmp	.+2      	; 0x73e <vfprintf+0x2d6>
 73c:	b9 2c       	mov	r11, r9
 73e:	a4 fe       	sbrs	r10, 4
 740:	0f c0       	rjmp	.+30     	; 0x760 <vfprintf+0x2f8>
 742:	fe 01       	movw	r30, r28
 744:	e8 0d       	add	r30, r8
 746:	f1 1d       	adc	r31, r1
 748:	80 81       	ld	r24, Z
 74a:	80 33       	cpi	r24, 0x30	; 48
 74c:	21 f4       	brne	.+8      	; 0x756 <vfprintf+0x2ee>
 74e:	9a 2d       	mov	r25, r10
 750:	99 7e       	andi	r25, 0xE9	; 233
 752:	a9 2e       	mov	r10, r25
 754:	09 c0       	rjmp	.+18     	; 0x768 <vfprintf+0x300>
 756:	a2 fe       	sbrs	r10, 2
 758:	06 c0       	rjmp	.+12     	; 0x766 <vfprintf+0x2fe>
 75a:	b3 94       	inc	r11
 75c:	b3 94       	inc	r11
 75e:	04 c0       	rjmp	.+8      	; 0x768 <vfprintf+0x300>
 760:	8a 2d       	mov	r24, r10
 762:	86 78       	andi	r24, 0x86	; 134
 764:	09 f0       	breq	.+2      	; 0x768 <vfprintf+0x300>
 766:	b3 94       	inc	r11
 768:	a3 fc       	sbrc	r10, 3
 76a:	11 c0       	rjmp	.+34     	; 0x78e <vfprintf+0x326>
 76c:	a0 fe       	sbrs	r10, 0
 76e:	06 c0       	rjmp	.+12     	; 0x77c <vfprintf+0x314>
 770:	b2 14       	cp	r11, r2
 772:	88 f4       	brcc	.+34     	; 0x796 <vfprintf+0x32e>
 774:	28 0c       	add	r2, r8
 776:	92 2c       	mov	r9, r2
 778:	9b 18       	sub	r9, r11
 77a:	0e c0       	rjmp	.+28     	; 0x798 <vfprintf+0x330>
 77c:	b2 14       	cp	r11, r2
 77e:	60 f4       	brcc	.+24     	; 0x798 <vfprintf+0x330>
 780:	b6 01       	movw	r22, r12
 782:	80 e2       	ldi	r24, 0x20	; 32
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 2b 04 	call	0x856	; 0x856 <fputc>
 78a:	b3 94       	inc	r11
 78c:	f7 cf       	rjmp	.-18     	; 0x77c <vfprintf+0x314>
 78e:	b2 14       	cp	r11, r2
 790:	18 f4       	brcc	.+6      	; 0x798 <vfprintf+0x330>
 792:	2b 18       	sub	r2, r11
 794:	02 c0       	rjmp	.+4      	; 0x79a <vfprintf+0x332>
 796:	98 2c       	mov	r9, r8
 798:	21 2c       	mov	r2, r1
 79a:	a4 fe       	sbrs	r10, 4
 79c:	10 c0       	rjmp	.+32     	; 0x7be <vfprintf+0x356>
 79e:	b6 01       	movw	r22, r12
 7a0:	80 e3       	ldi	r24, 0x30	; 48
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	0e 94 2b 04 	call	0x856	; 0x856 <fputc>
 7a8:	a2 fe       	sbrs	r10, 2
 7aa:	17 c0       	rjmp	.+46     	; 0x7da <vfprintf+0x372>
 7ac:	a1 fc       	sbrc	r10, 1
 7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <vfprintf+0x34e>
 7b0:	88 e7       	ldi	r24, 0x78	; 120
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <vfprintf+0x352>
 7b6:	88 e5       	ldi	r24, 0x58	; 88
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	b6 01       	movw	r22, r12
 7bc:	0c c0       	rjmp	.+24     	; 0x7d6 <vfprintf+0x36e>
 7be:	8a 2d       	mov	r24, r10
 7c0:	86 78       	andi	r24, 0x86	; 134
 7c2:	59 f0       	breq	.+22     	; 0x7da <vfprintf+0x372>
 7c4:	a1 fe       	sbrs	r10, 1
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <vfprintf+0x364>
 7c8:	8b e2       	ldi	r24, 0x2B	; 43
 7ca:	01 c0       	rjmp	.+2      	; 0x7ce <vfprintf+0x366>
 7cc:	80 e2       	ldi	r24, 0x20	; 32
 7ce:	a7 fc       	sbrc	r10, 7
 7d0:	8d e2       	ldi	r24, 0x2D	; 45
 7d2:	b6 01       	movw	r22, r12
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 2b 04 	call	0x856	; 0x856 <fputc>
 7da:	89 14       	cp	r8, r9
 7dc:	38 f4       	brcc	.+14     	; 0x7ec <vfprintf+0x384>
 7de:	b6 01       	movw	r22, r12
 7e0:	80 e3       	ldi	r24, 0x30	; 48
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 2b 04 	call	0x856	; 0x856 <fputc>
 7e8:	9a 94       	dec	r9
 7ea:	f7 cf       	rjmp	.-18     	; 0x7da <vfprintf+0x372>
 7ec:	8a 94       	dec	r8
 7ee:	f3 01       	movw	r30, r6
 7f0:	e8 0d       	add	r30, r8
 7f2:	f1 1d       	adc	r31, r1
 7f4:	80 81       	ld	r24, Z
 7f6:	b6 01       	movw	r22, r12
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 94 2b 04 	call	0x856	; 0x856 <fputc>
 7fe:	81 10       	cpse	r8, r1
 800:	f5 cf       	rjmp	.-22     	; 0x7ec <vfprintf+0x384>
 802:	22 20       	and	r2, r2
 804:	09 f4       	brne	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 806:	42 ce       	rjmp	.-892    	; 0x48c <vfprintf+0x24>
 808:	b6 01       	movw	r22, r12
 80a:	80 e2       	ldi	r24, 0x20	; 32
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	0e 94 2b 04 	call	0x856	; 0x856 <fputc>
 812:	2a 94       	dec	r2
 814:	f6 cf       	rjmp	.-20     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 816:	f6 01       	movw	r30, r12
 818:	86 81       	ldd	r24, Z+6	; 0x06
 81a:	97 81       	ldd	r25, Z+7	; 0x07
 81c:	02 c0       	rjmp	.+4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81e:	8f ef       	ldi	r24, 0xFF	; 255
 820:	9f ef       	ldi	r25, 0xFF	; 255
 822:	2b 96       	adiw	r28, 0x0b	; 11
 824:	e2 e1       	ldi	r30, 0x12	; 18
 826:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__epilogue_restores__>

0000082a <strnlen_P>:
 82a:	fc 01       	movw	r30, r24
 82c:	05 90       	lpm	r0, Z+
 82e:	61 50       	subi	r22, 0x01	; 1
 830:	70 40       	sbci	r23, 0x00	; 0
 832:	01 10       	cpse	r0, r1
 834:	d8 f7       	brcc	.-10     	; 0x82c <strnlen_P+0x2>
 836:	80 95       	com	r24
 838:	90 95       	com	r25
 83a:	8e 0f       	add	r24, r30
 83c:	9f 1f       	adc	r25, r31
 83e:	08 95       	ret

00000840 <strnlen>:
 840:	fc 01       	movw	r30, r24
 842:	61 50       	subi	r22, 0x01	; 1
 844:	70 40       	sbci	r23, 0x00	; 0
 846:	01 90       	ld	r0, Z+
 848:	01 10       	cpse	r0, r1
 84a:	d8 f7       	brcc	.-10     	; 0x842 <strnlen+0x2>
 84c:	80 95       	com	r24
 84e:	90 95       	com	r25
 850:	8e 0f       	add	r24, r30
 852:	9f 1f       	adc	r25, r31
 854:	08 95       	ret

00000856 <fputc>:
 856:	0f 93       	push	r16
 858:	1f 93       	push	r17
 85a:	cf 93       	push	r28
 85c:	df 93       	push	r29
 85e:	fb 01       	movw	r30, r22
 860:	23 81       	ldd	r18, Z+3	; 0x03
 862:	21 fd       	sbrc	r18, 1
 864:	03 c0       	rjmp	.+6      	; 0x86c <__stack+0xd>
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	9f ef       	ldi	r25, 0xFF	; 255
 86a:	2c c0       	rjmp	.+88     	; 0x8c4 <__stack+0x65>
 86c:	22 ff       	sbrs	r18, 2
 86e:	16 c0       	rjmp	.+44     	; 0x89c <__stack+0x3d>
 870:	46 81       	ldd	r20, Z+6	; 0x06
 872:	57 81       	ldd	r21, Z+7	; 0x07
 874:	24 81       	ldd	r18, Z+4	; 0x04
 876:	35 81       	ldd	r19, Z+5	; 0x05
 878:	42 17       	cp	r20, r18
 87a:	53 07       	cpc	r21, r19
 87c:	44 f4       	brge	.+16     	; 0x88e <__stack+0x2f>
 87e:	a0 81       	ld	r26, Z
 880:	b1 81       	ldd	r27, Z+1	; 0x01
 882:	9d 01       	movw	r18, r26
 884:	2f 5f       	subi	r18, 0xFF	; 255
 886:	3f 4f       	sbci	r19, 0xFF	; 255
 888:	31 83       	std	Z+1, r19	; 0x01
 88a:	20 83       	st	Z, r18
 88c:	8c 93       	st	X, r24
 88e:	26 81       	ldd	r18, Z+6	; 0x06
 890:	37 81       	ldd	r19, Z+7	; 0x07
 892:	2f 5f       	subi	r18, 0xFF	; 255
 894:	3f 4f       	sbci	r19, 0xFF	; 255
 896:	37 83       	std	Z+7, r19	; 0x07
 898:	26 83       	std	Z+6, r18	; 0x06
 89a:	14 c0       	rjmp	.+40     	; 0x8c4 <__stack+0x65>
 89c:	8b 01       	movw	r16, r22
 89e:	ec 01       	movw	r28, r24
 8a0:	fb 01       	movw	r30, r22
 8a2:	00 84       	ldd	r0, Z+8	; 0x08
 8a4:	f1 85       	ldd	r31, Z+9	; 0x09
 8a6:	e0 2d       	mov	r30, r0
 8a8:	09 95       	icall
 8aa:	89 2b       	or	r24, r25
 8ac:	e1 f6       	brne	.-72     	; 0x866 <__stack+0x7>
 8ae:	d8 01       	movw	r26, r16
 8b0:	16 96       	adiw	r26, 0x06	; 6
 8b2:	8d 91       	ld	r24, X+
 8b4:	9c 91       	ld	r25, X
 8b6:	17 97       	sbiw	r26, 0x07	; 7
 8b8:	01 96       	adiw	r24, 0x01	; 1
 8ba:	17 96       	adiw	r26, 0x07	; 7
 8bc:	9c 93       	st	X, r25
 8be:	8e 93       	st	-X, r24
 8c0:	16 97       	sbiw	r26, 0x06	; 6
 8c2:	ce 01       	movw	r24, r28
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	08 95       	ret

000008ce <__ultoa_invert>:
 8ce:	fa 01       	movw	r30, r20
 8d0:	aa 27       	eor	r26, r26
 8d2:	28 30       	cpi	r18, 0x08	; 8
 8d4:	51 f1       	breq	.+84     	; 0x92a <__ultoa_invert+0x5c>
 8d6:	20 31       	cpi	r18, 0x10	; 16
 8d8:	81 f1       	breq	.+96     	; 0x93a <__ultoa_invert+0x6c>
 8da:	e8 94       	clt
 8dc:	6f 93       	push	r22
 8de:	6e 7f       	andi	r22, 0xFE	; 254
 8e0:	6e 5f       	subi	r22, 0xFE	; 254
 8e2:	7f 4f       	sbci	r23, 0xFF	; 255
 8e4:	8f 4f       	sbci	r24, 0xFF	; 255
 8e6:	9f 4f       	sbci	r25, 0xFF	; 255
 8e8:	af 4f       	sbci	r26, 0xFF	; 255
 8ea:	b1 e0       	ldi	r27, 0x01	; 1
 8ec:	3e d0       	rcall	.+124    	; 0x96a <__ultoa_invert+0x9c>
 8ee:	b4 e0       	ldi	r27, 0x04	; 4
 8f0:	3c d0       	rcall	.+120    	; 0x96a <__ultoa_invert+0x9c>
 8f2:	67 0f       	add	r22, r23
 8f4:	78 1f       	adc	r23, r24
 8f6:	89 1f       	adc	r24, r25
 8f8:	9a 1f       	adc	r25, r26
 8fa:	a1 1d       	adc	r26, r1
 8fc:	68 0f       	add	r22, r24
 8fe:	79 1f       	adc	r23, r25
 900:	8a 1f       	adc	r24, r26
 902:	91 1d       	adc	r25, r1
 904:	a1 1d       	adc	r26, r1
 906:	6a 0f       	add	r22, r26
 908:	71 1d       	adc	r23, r1
 90a:	81 1d       	adc	r24, r1
 90c:	91 1d       	adc	r25, r1
 90e:	a1 1d       	adc	r26, r1
 910:	20 d0       	rcall	.+64     	; 0x952 <__ultoa_invert+0x84>
 912:	09 f4       	brne	.+2      	; 0x916 <__ultoa_invert+0x48>
 914:	68 94       	set
 916:	3f 91       	pop	r19
 918:	2a e0       	ldi	r18, 0x0A	; 10
 91a:	26 9f       	mul	r18, r22
 91c:	11 24       	eor	r1, r1
 91e:	30 19       	sub	r19, r0
 920:	30 5d       	subi	r19, 0xD0	; 208
 922:	31 93       	st	Z+, r19
 924:	de f6       	brtc	.-74     	; 0x8dc <__ultoa_invert+0xe>
 926:	cf 01       	movw	r24, r30
 928:	08 95       	ret
 92a:	46 2f       	mov	r20, r22
 92c:	47 70       	andi	r20, 0x07	; 7
 92e:	40 5d       	subi	r20, 0xD0	; 208
 930:	41 93       	st	Z+, r20
 932:	b3 e0       	ldi	r27, 0x03	; 3
 934:	0f d0       	rcall	.+30     	; 0x954 <__ultoa_invert+0x86>
 936:	c9 f7       	brne	.-14     	; 0x92a <__ultoa_invert+0x5c>
 938:	f6 cf       	rjmp	.-20     	; 0x926 <__ultoa_invert+0x58>
 93a:	46 2f       	mov	r20, r22
 93c:	4f 70       	andi	r20, 0x0F	; 15
 93e:	40 5d       	subi	r20, 0xD0	; 208
 940:	4a 33       	cpi	r20, 0x3A	; 58
 942:	18 f0       	brcs	.+6      	; 0x94a <__ultoa_invert+0x7c>
 944:	49 5d       	subi	r20, 0xD9	; 217
 946:	31 fd       	sbrc	r19, 1
 948:	40 52       	subi	r20, 0x20	; 32
 94a:	41 93       	st	Z+, r20
 94c:	02 d0       	rcall	.+4      	; 0x952 <__ultoa_invert+0x84>
 94e:	a9 f7       	brne	.-22     	; 0x93a <__ultoa_invert+0x6c>
 950:	ea cf       	rjmp	.-44     	; 0x926 <__ultoa_invert+0x58>
 952:	b4 e0       	ldi	r27, 0x04	; 4
 954:	a6 95       	lsr	r26
 956:	97 95       	ror	r25
 958:	87 95       	ror	r24
 95a:	77 95       	ror	r23
 95c:	67 95       	ror	r22
 95e:	ba 95       	dec	r27
 960:	c9 f7       	brne	.-14     	; 0x954 <__ultoa_invert+0x86>
 962:	00 97       	sbiw	r24, 0x00	; 0
 964:	61 05       	cpc	r22, r1
 966:	71 05       	cpc	r23, r1
 968:	08 95       	ret
 96a:	9b 01       	movw	r18, r22
 96c:	ac 01       	movw	r20, r24
 96e:	0a 2e       	mov	r0, r26
 970:	06 94       	lsr	r0
 972:	57 95       	ror	r21
 974:	47 95       	ror	r20
 976:	37 95       	ror	r19
 978:	27 95       	ror	r18
 97a:	ba 95       	dec	r27
 97c:	c9 f7       	brne	.-14     	; 0x970 <__ultoa_invert+0xa2>
 97e:	62 0f       	add	r22, r18
 980:	73 1f       	adc	r23, r19
 982:	84 1f       	adc	r24, r20
 984:	95 1f       	adc	r25, r21
 986:	a0 1d       	adc	r26, r0
 988:	08 95       	ret

0000098a <__prologue_saves__>:
 98a:	2f 92       	push	r2
 98c:	3f 92       	push	r3
 98e:	4f 92       	push	r4
 990:	5f 92       	push	r5
 992:	6f 92       	push	r6
 994:	7f 92       	push	r7
 996:	8f 92       	push	r8
 998:	9f 92       	push	r9
 99a:	af 92       	push	r10
 99c:	bf 92       	push	r11
 99e:	cf 92       	push	r12
 9a0:	df 92       	push	r13
 9a2:	ef 92       	push	r14
 9a4:	ff 92       	push	r15
 9a6:	0f 93       	push	r16
 9a8:	1f 93       	push	r17
 9aa:	cf 93       	push	r28
 9ac:	df 93       	push	r29
 9ae:	cd b7       	in	r28, 0x3d	; 61
 9b0:	de b7       	in	r29, 0x3e	; 62
 9b2:	ca 1b       	sub	r28, r26
 9b4:	db 0b       	sbc	r29, r27
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	f8 94       	cli
 9ba:	de bf       	out	0x3e, r29	; 62
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	cd bf       	out	0x3d, r28	; 61
 9c0:	09 94       	ijmp

000009c2 <__epilogue_restores__>:
 9c2:	2a 88       	ldd	r2, Y+18	; 0x12
 9c4:	39 88       	ldd	r3, Y+17	; 0x11
 9c6:	48 88       	ldd	r4, Y+16	; 0x10
 9c8:	5f 84       	ldd	r5, Y+15	; 0x0f
 9ca:	6e 84       	ldd	r6, Y+14	; 0x0e
 9cc:	7d 84       	ldd	r7, Y+13	; 0x0d
 9ce:	8c 84       	ldd	r8, Y+12	; 0x0c
 9d0:	9b 84       	ldd	r9, Y+11	; 0x0b
 9d2:	aa 84       	ldd	r10, Y+10	; 0x0a
 9d4:	b9 84       	ldd	r11, Y+9	; 0x09
 9d6:	c8 84       	ldd	r12, Y+8	; 0x08
 9d8:	df 80       	ldd	r13, Y+7	; 0x07
 9da:	ee 80       	ldd	r14, Y+6	; 0x06
 9dc:	fd 80       	ldd	r15, Y+5	; 0x05
 9de:	0c 81       	ldd	r16, Y+4	; 0x04
 9e0:	1b 81       	ldd	r17, Y+3	; 0x03
 9e2:	aa 81       	ldd	r26, Y+2	; 0x02
 9e4:	b9 81       	ldd	r27, Y+1	; 0x01
 9e6:	ce 0f       	add	r28, r30
 9e8:	d1 1d       	adc	r29, r1
 9ea:	0f b6       	in	r0, 0x3f	; 63
 9ec:	f8 94       	cli
 9ee:	de bf       	out	0x3e, r29	; 62
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	cd bf       	out	0x3d, r28	; 61
 9f4:	ed 01       	movw	r28, r26
 9f6:	08 95       	ret

000009f8 <_exit>:
 9f8:	f8 94       	cli

000009fa <__stop_program>:
 9fa:	ff cf       	rjmp	.-2      	; 0x9fa <__stop_program>
